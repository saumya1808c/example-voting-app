pipeline {
    agent none

      stages {
        stage('build') {
        agent {
          docker{
                image 'maven:3.6.1-jdk-8-alpine'
                args '-v $HOME/.m2:/root/.m2'
                }
             }
          when{
                changeset "**/worker/**"
               }
            steps {
                echo 'this is worker build job'
                dir('worker'){
                sh 'mvn compile'
                }
            }
       }
       stage('test') {
       agent {
         docker{
               image 'maven:3.6.1-jdk-8-alpine'
               args '-v $HOME/.m2:/root/.m2'
               }
            }
       when {
                changeset "**/worker/**"
            }
           steps {
               echo 'this is worker test job'
               dir('worker'){
               sh 'mvn clean test'
               }
           }
           }


        stage('package'){
        agent {
          docker{
                image 'maven:3.6.1-jdk-8-alpine'
                args '-v $HOME/.m2:/root/.m2'
                }
             }
           when {
                    branch 'master'
                    changeset "**/worker/**"
                }
          steps{
              echo 'packaging worker app into a jarfile'
              dir('worker'){
                   sh 'mvn package -DskipTests'
                   archiveArtifacts artifacts: '**/target/*.jar', fingerprint:True
                }
          }
        }

        stage('docker-package'){
          agent any
           when {
                    changeset "**/worker/**"
                }
              steps{
                  echo 'this is docker-package job'
                  script{
                  docker.withRegistry('https://index.docker.io/v1/', 'dockerlogin') {
                  def workerImage = docker.build("saumya043/worker:v${env.BUILD_ID}", "./worker")
                  workerImage.push()
                  workerImage.push("${env.BRANCH_NAME}")
               }
             }
          }
        }

}

    post{
    always{
    echo 'pipeline for worker is complete'
          }
    failure{
    slackSend (channel: "instavote-cd" , message:"Build failed - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
          }
    success{
    slackSend (channel: "instavote-cd" , message:"Build succeeded - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
    }
    }
}
